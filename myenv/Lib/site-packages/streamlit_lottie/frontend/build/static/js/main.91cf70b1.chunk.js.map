{"version":3,"sources":["StreamlitLottie.tsx","index.tsx"],"names":["withStreamlitConnection","props","lottieElementRef","useRef","lottieInstanceRef","_props$args","args","animationData","speed","direction","loop","quality","height","width","useEffect","current","lottie","loadAnimation","container","renderer","autoplay","setSubframe","addEventListener","Streamlit","setFrameHeight","removeEventListener","destroy","undefined","setQuality","Number","isNaN","setSpeed","setDirection","_jsx","_Fragment","children","style","ref","ReactDOM","render","StreamlitLottie","document","getElementById"],"mappings":"0MAqFeA,eAnES,SAACC,GACvB,IAAMC,EAAmBC,iBAAuB,MAC1CC,EAAoBD,mBAE1BE,EAQgBJ,EAAMK,KAPpBC,EAAaF,EAAbE,cACAC,EAAKH,EAALG,MACAC,EAASJ,EAATI,UACAC,EAAIL,EAAJK,KACAC,EAAON,EAAPM,QACAC,EAAMP,EAANO,OACAC,EAAKR,EAALQ,MA+CF,OA5CAC,qBAAU,WACR,GAAI,OAASZ,EAAiBa,QAiB9B,OAbAX,EAAkBW,QAAUC,IAAOC,cAAc,CAC/CC,UAAWhB,EAAiBa,QAC5BI,SAAU,MACVT,KAAMA,EACNU,UAAU,EACVb,cAAeA,IAEjBH,EAAkBW,QAAQM,aAAY,GAEtCjB,EAAkBW,QAAQO,iBAAiB,aAAa,WACtDC,IAAUC,gBACZ,IAEO,WACApB,EAAkBW,UAGvBX,EAAkBW,QAAQU,oBAAoB,aAC9CrB,EAAkBW,QAAQW,UAC1BtB,EAAkBW,aAAUY,EAC9B,CACF,GAAG,CAACpB,EAAeG,IAEnBI,qBAAU,WACHV,EAAkBW,SACvBC,IAAOY,WAAWjB,EACpB,GAAG,CAACA,IAEJG,qBAAU,WACHV,EAAkBW,UACnBc,OAAOC,MAAMtB,IACjBJ,EAAkBW,QAAQgB,SAASvB,GACrC,GAAG,CAACA,IAEJM,qBAAU,WACHV,EAAkBW,SACvBX,EAAkBW,QAAQiB,aAAavB,EACzC,GAAG,CAACA,IAGFwB,cAAAC,WAAA,CAAAC,SACEF,cAAA,OACEG,MAAO,CAAEvB,MAAOA,GAAS,OAAQD,OAAQA,GAAU,QACnDyB,IAAKnC,KAIb,I,MC9EAoC,IAASC,OACLN,cAACO,EAAe,IAChBC,SAASC,eAAe,Q","file":"static/js/main.91cf70b1.chunk.js","sourcesContent":["import {\n  Streamlit,\n  ComponentProps,\n  withStreamlitConnection,\n} from \"streamlit-component-lib\"\nimport React, { useEffect, useRef } from \"react\"\nimport lottie, { AnimationItem } from \"lottie-web\"\n\ninterface PythonArgs {\n  animationData: any\n  loop: boolean | number\n  speed: number\n  direction: 1 | -1\n  quality: \"high\" | \"medium\" | \"low\"\n  height?: number\n  width?: number\n}\n\nconst StreamlitLottie = (props: ComponentProps) => {\n  const lottieElementRef = useRef<HTMLDivElement>(null)\n  const lottieInstanceRef = useRef<AnimationItem>()\n\n  const {\n    animationData,\n    speed,\n    direction,\n    loop,\n    quality,\n    height,\n    width,\n  }: PythonArgs = props.args\n\n  useEffect(() => {\n    if (null === lottieElementRef.current) {\n      return\n    }\n\n    lottieInstanceRef.current = lottie.loadAnimation({\n      container: lottieElementRef.current,\n      renderer: \"svg\",\n      loop: loop,\n      autoplay: true,\n      animationData: animationData,\n    })\n    lottieInstanceRef.current.setSubframe(false)\n\n    lottieInstanceRef.current.addEventListener(\"DOMLoaded\", () => {\n      Streamlit.setFrameHeight()\n    })\n\n    return () => {\n      if (!lottieInstanceRef.current) {\n        return\n      }\n      lottieInstanceRef.current.removeEventListener(\"DOMLoaded\")\n      lottieInstanceRef.current.destroy()\n      lottieInstanceRef.current = undefined\n    }\n  }, [animationData, loop])\n\n  useEffect(() => {\n    if (!lottieInstanceRef.current) return\n    lottie.setQuality(quality)\n  }, [quality])\n\n  useEffect(() => {\n    if (!lottieInstanceRef.current) return\n    if (Number.isNaN(speed)) return\n    lottieInstanceRef.current.setSpeed(speed)\n  }, [speed])\n\n  useEffect(() => {\n    if (!lottieInstanceRef.current) return\n    lottieInstanceRef.current.setDirection(direction)\n  }, [direction])\n\n  return (\n    <>\n      <div\n        style={{ width: width || \"100%\", height: height || \"100%\" }}\n        ref={lottieElementRef}\n      ></div>\n    </>\n  )\n}\nexport default withStreamlitConnection(StreamlitLottie)\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport StreamlitLottie from \"./StreamlitLottie\"\n\nimport \"./index.css\"\n\nReactDOM.render(\n    <StreamlitLottie />,\n    document.getElementById(\"root\")\n)\n"],"sourceRoot":""}